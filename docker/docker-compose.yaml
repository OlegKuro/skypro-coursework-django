version: '3.8'

x-app-env: &app-env
  DB_USER: $DB_USER
  DB_PASSWORD: $DB_PASSWORD
  DB_NAME: $DB_NAME
  DB_HOST: $DB_HOST
  DB_PORT: $DB_PORT
  DB_ENGINE: $DB_ENGINE
  SOCIAL_AUTH_VK_OAUTH2_SECRET: $SOCIAL_AUTH_VK_OAUTH2_SECRET
  SOCIAL_AUTH_VK_OAUTH2_KEY: $SOCIAL_AUTH_VK_OAUTH2_KEY
  SKEY: $SKEY

services:
  frontend:
    image: sermalenk/skypro-front:base
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - api

  db:
    image: postgres:12.4-alpine
    volumes:
      - ./db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

  migrations:
    image: olegkuro/skypro-hw:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    networks:
      - db-network
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: *app-env
    command: "./manage.py migrate"

  api:
    image: olegkuro/skypro-hw:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: unless-stopped
    networks:
      - app-network
      - db-network
    environment:
      <<: *app-env
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

networks:
  app-network:
  db-network:
